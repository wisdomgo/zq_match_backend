# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Test Server CI/CD

on:
  workflow_dispatch:
  push:
#    branches:
#      - master
#      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-0  # increment to reset cache
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: {% raw %}venv-${{ runner.os }}-{% raw %}${{ hashFiles('**/poetry.lock') }}{% endraw %}
          restore-keys: |
            {% raw %}venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}{% endraw %}
            {% raw %}venv-${{ runner.os }}-{% endraw %}
      - name: Install dependencies
        run: |
          poetry export --with test --without dev --output requirements.txt --without-urls
          poetry run pip install -r requirements.txt
      - name: Style check
        run: |
          poetry run black --check server
          poetry run flake8 server --count --statistics
          poetry run isort --check-only server
      - name: Pytest
        run: poetry run pytest --cov server --cov-report xml -n logical
  #      - name: Upload coverage
  #        uses: codecov/codecov-action@v3
  #        with:
  #          token: {% raw %}${{ secrets.CODECOV_TOKEN }}{% endraw %}
  #          file: ./coverage.xml
  #          fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs:
      - test
    strategy:
      matrix:
        image: [ 'django' ]
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: using cache
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: {% raw %}docker-layer-caching-${{ github.workflow }}-${{ matrix.image }}-{hash}{% endraw %}
          restore-keys: |
            {% raw %}docker-layer-caching-${{ github.workflow }}-${{ matrix.image }}-{% endraw %}
      - name: {% raw %}build and push docker image ${{ matrix.image }}{% endraw %}
        run: |
          {% raw %}docker login registry.cn-hangzhou.aliyuncs.com --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}{% endraw %}
          docker build -f {% raw %}docker/${{ matrix.image }}/Dockerfile{% endraw %} -t registry.cn-hangzhou.aliyuncs.com/ziqiang_studio/{{cookiecutter.project_name}}:{% raw %}${{ matrix.image }}{% endraw %}-test .
          docker push registry.cn-hangzhou.aliyuncs.com/ziqiang_studio/{{cookiecutter.project_name}}:{% raw %}${{ matrix.image }}{% endraw %}-test
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: deploy docker image
        uses: appleboy/ssh-action@master
        with:
          host: {% raw %}${{ secrets.TEST_SSH_HOST }}{% endraw %}
          username: {% raw %}${{ secrets.TEST_SSH_USERNAME }}{% endraw %}
          password: {% raw %}${{ secrets.TEST_SSH_PASSWORD }}{% endraw %}
          script: |
            cd ~/backend-test
            {% raw %}docker login registry-vpc.cn-hangzhou.aliyuncs.com --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}{% endraw %}
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f
